{{ 'component-product-variant-picker.css' | asset_url | stylesheet_tag }}
{{ 'component-swatch-input.css' | asset_url | stylesheet_tag }}
{{ 'component-swatch.css' | asset_url | stylesheet_tag }}
  <script src="{{ 'product-info.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const ajouterAuPanierBouton = document.querySelector('.btn-atc');
  
    // Fonction pour ajouter une variante au panier
    function ajouterAuPanier(variantId, quantity) {
      var data = {
        items: [
          {
            id: variantId,
            quantity: quantity
          }
        ]
      };
  
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => {
        if (response.ok) {
          console.log('Variant ajouté avec succès');
          return response.json();
        } else {
          throw new Error('Échec de l\'ajout au panier');
        }
      })
      .then(async data => {
        // Mise à jour de l'affichage du panier ou toute autre action après l'ajout

        // Get new cart object
        const res = await fetch("/cart.json");
        const cart = await res.json();

        var headerCartIcon = document.querySelector(".header__icon--cart");
        var existingBubble = headerCartIcon.querySelector(".cart-count-bubble");
 

        function createCartCountBubble(item) {
          // Créer l'élément div pour le bubble
          var cartCountBubble = document.createElement("div");
          cartCountBubble.className = "cart-count-bubble";

          // Créer le premier span avec aria-hidden
          var spanAriaHidden = document.createElement("span");
          spanAriaHidden.setAttribute("aria-hidden", "true");
          spanAriaHidden.textContent = `${item}`; // Supposons que vous voulez mettre 15 articles

          // Créer le second span pour accessibilité
          var spanVisuallyHidden = document.createElement("span");
          spanVisuallyHidden.className = "visually-hidden";
          spanVisuallyHidden.textContent = `${item} articles`;

          // Ajouter les spans au div bubble
          cartCountBubble.appendChild(spanAriaHidden);
          cartCountBubble.appendChild(spanVisuallyHidden);

          // Retourner l'élément bubble complet
          return cartCountBubble;
        }

        // Vérifier si le bubble existe déjà
        if (!existingBubble) {
          var newCartCountBubble = await createCartCountBubble(cart.item_count);
          headerCartIcon.appendChild(newCartCountBubble);
          console.log("Cart count bubble added.");
        } else {
          // Update cart count
          var cartBubble = document.querySelector(".cart-count-bubble");

          // Within this element, find the <span> that has the 'aria-hidden' attribute set to 'true'
          var ariaHiddenSpan = cartBubble.querySelector('span[aria-hidden="true"]');

          ariaHiddenSpan.textContent = cart.item_count;
          console.log("Cart count bubble already exists.");
        }

        // location.reload();


         //Update cart
          const updateCartDrawer = async () => {
            const res = await fetch("/?section_id=cart-drawer");
            const text = await res.text();

            const html = document.createElement("div");
            html.innerHTML = text;

            const newBox = html.querySelector("#cart-target").innerHTML;
            document.querySelector("#cart-target").innerHTML = newBox;

            console.log(html, "lol");
          };

          await updateCartDrawer();

          const cartDrawer = document.querySelector(".drawer");
          cartDrawer.classList.add("animate"); // Ajouter la classe 'active'
          cartDrawer.classList.add("active"); // Ajouter la classe 'active'
      })
      .catch(error => {
        console.error('Erreur:', error);
      });
    }
    
    // Événement au clic sur le bouton "Ajouter au panier"
    ajouterAuPanierBouton.addEventListener('click', async function(e) {
      e.preventDefault();  // Empêche le comportement par défaut de recharger la page
  
      // Extrait l'ID de la variante de l'URL
      const urlParams = new URLSearchParams(window.location.search);
      const variantId = urlParams.get('variant');
  
      console.log(variantId)
  
      if (variantId) {
        await ajouterAuPanier(variantId, 1); // Remplacer `1` par la quantité désirée
      } else {
        alert('Veuillez sélectionner une variante');
        return;
      }
    });





    const buttons = document.querySelectorAll('.button-class'); // Remplacez '.button-class' par la classe réelle de vos boutons
    console.log(buttons, )

    buttons.forEach(button => {
        button.addEventListener('click', function() {
            // Retirer la classe 'active' de tous les boutons
            buttons.forEach(btn => {
                btn.classList.remove('active');
            });

            // Ajouter la classe 'active' au bouton qui a été cliqué
            this.classList.add('active');
        });
    });

    ////////////////////////
    const liveElements = document.querySelectorAll('.live');

    // Fonction pour mettre à jour le nombre pour un produit spécifique
    function updateNumber(liveElement) {
        // Récupérer la clé unique pour ce produit
        const productId = liveElement.dataset.productId;
    
        // Récupérer le dernier chiffre stocké localement pour ce produit ou générer un nouveau nombre initial aléatoire entre 1 et 12
        let currentValue = parseInt(localStorage.getItem(`currentValue_${productId}`)) || Math.floor(Math.random() * 12) + 1;
        let incrementing = true;  // Drapeau pour gérer l'incrémentation ou la décrémentation
    
        // Mettre à jour le contenu de l'élément
        liveElement.textContent = currentValue;
    
        // Déterminer si on doit incrémenter ou décrémenter
        if (currentValue === 12) {
            incrementing = false;  // Commencer à décrémenter
        } else if (currentValue === 1) {
            incrementing = true;   // Commencer à incrémenter
        }
    
        // Incrémenter ou décrémenter le currentValue selon le drapeau
        currentValue += incrementing ? 1 : -1;
    
        // Stocker localement le dernier chiffre généré pour ce produit
        localStorage.setItem(`currentValue_${productId}`, currentValue);
    }
    
    // Pour chaque élément .live, appeler la fonction updateNumber avec cet élément
    liveElements.forEach(updateNumber);
    
  });

  // Sélection de l'élément avec la classe ".header-wrapper"
  var headerWrapper = document.querySelector(".header-wrapper");

  // Couleur d'arrière-plan d'origine
  var originalBackgroundColor = window.getComputedStyle(headerWrapper).backgroundColor;

  // Ajout d'un gestionnaire d'événements de défilement à la fenêtre
  window.addEventListener("scroll", function() {
      // Vérification de la position de défilement de la page
      if (window.scrollY >= 200) {
          // Si le défilement est à 300px ou plus
          headerWrapper.style.backgroundColor = "#fff7e5";
          headerWrapper.style.borderBottom = "0.1rem solid rgba(21,67,61, .08)"; // Rétablir la couleur d'origine
      } else {
          // Si le défilement est en dessous de 300px
          headerWrapper.style.backgroundColor = originalBackgroundColor; // Rétablir la couleur d'origine
          headerWrapper.style.border = "none"; // Rétablir la couleur d'origine
      }
  });
</script>





<div class="page-layout" style="background-color: {{ product.metafields.custom.fp_background_couleur_global }}">
  <div class="zippy-container">
    {% comment %} <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Accueil</a></li>
        <li class="breadcrumb-item"><a href="#">p</a></li>
        <li class="breadcrumb-item active" aria-current="page">Data</li>
      </ol>
    </nav> {% endcomment %}
    <div class="focus-produit-layout">
      <div class="image-block">
        <div class="carousel-container" style="background-color: {{ product.metafields.custom.fp_background_couleur_milieu }}">
          <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner">
              <div class="carousel-item active">
                <div class="flex-container">
                  <img class="d-block w-100 first-slide" src="{{ product.media[0].src | image_url: width: 3000 }}" alt="First slide">
                </div>
              </div>
              <div class="carousel-item">
                <div class="flex-container">
                  <img class="d-block w-100" src="{{ product.media[1].src | image_url: width: 3000 }}" alt="Second slide">
                </div>
              </div>
            </div>
            {% comment %} <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev" onclick="$('#carouselExampleControls').carousel('prev')">
              <span class="carousel-control-prev-icon" aria-hidden="true"></span>
              <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next" onclick="$('#carouselExampleControls').carousel('next')">
              <span class="carousel-control-next-icon" aria-hidden="true"></span>
              <span class="sr-only">Next</span>
            </a> {% endcomment %}
          </div>
        </div>
        <div class="box-container">
          <div class="box" style="background-color: {{ product.metafields.custom.fp_background_couleur_milieu }}">
            {% render 'icon-fp-chart',
              color: "#fff", 
              colorOutline: "#15433d", 
            %}
            <p>{{ product.metafields.custom.fact_n_1_focus_produits }} % de CBD</p>
          </div>
          <div class="box" style="background-color: {{ product.metafields.custom.fp_background_couleur_milieu }}">
            {% render 'icon-fp-stars',
              color: "#fff", 
              colorOutline: "#15433d", 
            %}
            <p>{{ product.metafields.custom.fact_n_2_focus_produits }}</p>
          </div>
          <div class="box" style="background-color: {{ product.metafields.custom.fp_background_couleur_milieu }}">
            {% render 'icon-fp-heart',
              color: "#fff", 
              colorOutline: "#15433d", 
            %}
            <p>Contre {{ product.metafields.custom.fact_n_3_focus_produits }}</p>
          </div>
        </div>
      </div>
      <div class="info-block">
        <div class="info-reviews">
          <a href="#shopify-section-template--22408776778053__rich_text_azhbyy" style="scroll-margin-top: 3rem; text-decoration: none; color: #15433d;">
            <div class="reviews-container">
              <div class="stars-layout">
                {% render 'icon-star-filled' %}
                {% render 'icon-star-filled' %}
                {% render 'icon-star-filled' %}
                {% render 'icon-star-filled' %}
                {% render 'icon-star-unfiled' %}
              </div>
              <span>{{ product.metafields.loox.num_reviews }}+</span>
              {% comment %} <span>310+</span> {% endcomment %}
            </div>
          </a>
          <span class="info-more">100% Légal • Non addictif • {{ product.metafields.custom.taux_de_thc }}% THC</span>
        </div>
        <h2 class="title">{{ product.title }}</h2>
        <ul class="list-claim">
          <li class="claim-item">{{ product.metafields.custom.claim_focus_produit }}</li>
        </ul>
        <div class="center-layout">
          <div class="round"><p style="display: none;">o</p></div>
          <p class="line">
            <span class="live"></span>
            <span class="visitor"> personnes regardent ce produit en ce moment.</span>
          </p>
        </div>
        {% comment %} {% form 'product', product %} {% endcomment %}
          {% render 'product-variant-picker', product: product, product_form_id: product.id %}
          {% comment %} <button type="submit" class="btn-atc" id="btn-ok">Ajouter au panier</button> {% endcomment %}
          {% comment %} {% endform %} {% endcomment %}
        <div class="reassurance-layout">
          {%- for block in section.blocks -%}
            <div class="reassurance">
              <img src="{{ block.settings.image | image_url: width: 3200, height: 1000 }}" alt="logo" class="img-info">
              {{ block.settings.text | replace: '<p', '<p class="title-info"' }}
            </div>
          {%- endfor -%}
        </div>
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "fp-focus-produit-zippy",
  "class": "section-fp-focus-produit-zippy",
  "tag": "section",
  "max_blocks": 3,
  "blocks": [
    {
      "name": "Réassurance",
      "type": "Reassurance",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Texte"
        }
      ]
    }
  ],
  "settings": [
  ]
}
{% endschema %}
